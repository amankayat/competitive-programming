#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back

#define vll vector<long long>v
#define vss vector<string>v
#define vcc vector<char>v
#define vii vector<int>v

#define mii map<int,int>m;
#define mll map<ll,ll>m
#define mss map<string,int>m

const int N=1e5;

//-----------print;
template <typename T>
void print(T arr,int n)
{
    for(int i=0;i<n;i++)
        cout<<arr[i]<<" ";
    cout<<"\n";
}

//------------check power of 2;
bool isPowerOfTwo(int n){
    if((n&(n-1)) == 0)
        return true;
    return false;
}

//-----------comaparator function;
int myCmp(pair<int,int>p1,pair<int,int>p2)
{   
    
  //      return p1.first<p2.first;
    return p1.second>p2.second;
}

//-----------LCS;
int length_of_LCS(string s1,string s2)
{
    int n=s1.length(),m=s2.length();
    int dp[n+1][m+1];
//  Initialization-------------
    for(int i=0;i<n+1;i++)
    {
        for(int j=0;j<m+1;j++)
        {
            if(i==0 || j==0)
                dp[i][j]=0;
        }
    }

    for(int i=1;i<n+1;i++)
    {
        for(int j=1;j<m+1;j++)
        {
            if(s1[i-1]==s2[j-1])
                dp[i][j]=1+dp[i-1][j-1];
            else
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
        }
    }

    return dp[n][m];
}

//------------length of longest common substring;
int longest_common_substring(string s1,string s2)
{
    int n=s1.length(),m=s2.length();
    int dp[n+1][m+1];
    for(int i=0;i<n+1;i++)
    {
        for(int j=0;j<m+1;j++)
        {
            if(i==0 || j==0)
                dp[i][j]=0;
        }
    }
    int maxi=INT_MIN;
    for(int i=1;i<n+1;i++)
    {
        for(int j=1;j<m+1;j++)
        {
            if(s1[i-1]==s2[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
                maxi=max(dp[i][j],maxi);
            }
            else
                dp[i][j]=0;
        }
    }
    return maxi;
}
int lastOcc(int arr[],int n,int x,vector<int>&v)
{
    int l=0,h=n-1;
    while(l<=h)
    {
        int mid=(l+h)/2;
        if(arr[mid]==x)
        {
            if(mid==n-1 || arr[mid]!=arr[mid+1])
               return mid;
            else
                l=mid+1;
        }
        else if(arr[mid]>x)
            h=mid-1;
        else
            l=mid+1;
    }
    return -1;
}
int firstOcc(int arr[],int n,int x,vector<int>&v)
{
    int l=0,h=n-1;
    while(l<=h)
    {
        int mid=(l+h)/2;
        if(arr[mid]==x)
        {
            if(mid==0 || arr[mid]!=arr[mid-1])
               return mid;
            else
                h=mid-1;
        }
        else if(arr[mid]>x)
            h=mid-1;
        else
            l=mid+1;
    }
    return -1;
}
//check whether all the elements are present in array or not within a given range;
bool check(int a[],int n,int A,int B)
{
    //range ---- A to B;
    if(n<=B-A)
        return false;
    for(int i=0;i<n;i++)
    {
        if(abs(a[i])>=A && abs(a[i])<=B)
        {
            int id=abs(a[i])-A;
            if(a[id]>0)
                a[id]*=-1;
        }
    }
    for(int i=0;i<=B-A;i++)
        if(a[i]>0) return false;
    return true;
}
// int binarySearch(int A[],int l,int h,int k)
// {
//     while(l<=h)
//     {
//         int mid=(l+h)/2;
//         if(A[mid]==k)
//             return 1;
//         else if(A[mid]<k)
//             l=mid+1;
//         else
//             h=mid-1;
//     }
//     return -1;
// }
////////////////------------my functions;


/////////////////-----------main;




// int main() {
//     // your code goes here
       
//     int B[]={1,2,3,4};
//     int n=4;
//     for(int i=0;i<n;i++)
//     {
//         if(binarySearch(B,0,n-1,5)==0)
//             cout<<"YES";
//         else
//             cout<<"NO";
//     }
// }
int binarySearch(int B[],int l,int h,int x)
    {
        while(l<=h){
        int mid=(l+h)/2;
        if(B[mid]==x)
            return 1;
       else if(B[mid]>x)
            h=mid-1;
       else
            l=mid+1;
        }
        return -1;
    }
    int findSwapValues(int A[], int n, int B[], int m)
    {
        // Your code goes here
        long long sum1=0,sum2=0;
        for(int i=0;i<n;i++)
            sum1+=A[i];
        for(int j=0;j<m;j++)
            sum2+=B[j];
        sort(A,A+n);
        sort(B,B+m);
        if((sum1+sum2)%2 != 0)
            return -1;
        else if(sum1==sum2)
        {
            for(int i=0;i<n;i++)
            {
                if(binarySearch(B,0,m-1,A[i])==1)
                    return 1;
            }
            return -1;
        }
        else
        {
            long long req_sum=(sum1+sum2)/2;
            if(sum1>sum2)
            {
                for(int i=0;i<n;i++)
                {
                    if((sum1-A[i])<req_sum)
                    {
                        if(binarySearch(B,0,m-1,req_sum-(sum1-A[i]))==1)
                            return 1;
                    }
                }
                return -1;
            }
            else
            {
                for(int i=0;i<m;i++)
                {
                    if((sum2-B[i])<req_sum)
                    {
                        if(binarySearch(A,0,n-1,req_sum-(sum2-B[i]))==1)
                            return 1;
                    }
                }
                return -1;
            }
        }
    }
string fun(string a,string b,string c)
{
    for(int i=0;i<a.length();i++)
        {
            set<char>s;
            s.insert(a[i]);
            s.insert(b[i]);
            s.insert(c[i]);
            if(a[i]==b[i] && a[i]!=c[i])
                return "NO";
            if(s.size()>2)
                return "NO";
            else
                s.clear();
        }
        return "YES";  
}
int main()
{
    
    int n;
    cin>>n;
    string a,b,c;
    while(n--)
    {
        cin>>a>>b>>c;
        cout<<fun(a,b,c);
        cout<<"\n";
    }

}
